/* Auto-generated by genmsg_cpp for file /home/raven/Documents/raven_2/msg/raven_automove.msg */
#ifndef RAVEN_2_MESSAGE_RAVEN_AUTOMOVE_H
#define RAVEN_2_MESSAGE_RAVEN_AUTOMOVE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Transform.h"

namespace raven_2
{
template <class ContainerAllocator>
struct raven_automove_ {
  typedef raven_automove_<ContainerAllocator> Type;

  raven_automove_()
  : hdr()
  , del_pos()
  , tf_incr()
  {
    del_pos.assign(0);
  }

  raven_automove_(const ContainerAllocator& _alloc)
  : hdr(_alloc)
  , del_pos()
  , tf_incr()
  {
    del_pos.assign(0);
    tf_incr.assign( ::geometry_msgs::Transform_<ContainerAllocator> (_alloc));
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _hdr_type;
   ::std_msgs::Header_<ContainerAllocator>  hdr;

  typedef boost::array<int32_t, 6>  _del_pos_type;
  boost::array<int32_t, 6>  del_pos;

  typedef boost::array< ::geometry_msgs::Transform_<ContainerAllocator> , 2>  _tf_incr_type;
  boost::array< ::geometry_msgs::Transform_<ContainerAllocator> , 2>  tf_incr;


  typedef boost::shared_ptr< ::raven_2::raven_automove_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raven_2::raven_automove_<ContainerAllocator>  const> ConstPtr;
}; // struct raven_automove
typedef  ::raven_2::raven_automove_<std::allocator<void> > raven_automove;

typedef boost::shared_ptr< ::raven_2::raven_automove> raven_automovePtr;
typedef boost::shared_ptr< ::raven_2::raven_automove const> raven_automoveConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::raven_2::raven_automove_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::raven_2::raven_automove_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace raven_2

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::raven_2::raven_automove_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::raven_2::raven_automove_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::raven_2::raven_automove_<ContainerAllocator> > {
  static const char* value() 
  {
    return "409f695c901a20d6a1f90a4e55ae6f63";
  }

  static const char* value(const  ::raven_2::raven_automove_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x409f695c901a20d6ULL;
  static const uint64_t static_value2 = 0xa1f90a4e55ae6f63ULL;
};

template<class ContainerAllocator>
struct DataType< ::raven_2::raven_automove_<ContainerAllocator> > {
  static const char* value() 
  {
    return "raven_2/raven_automove";
  }

  static const char* value(const  ::raven_2::raven_automove_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::raven_2::raven_automove_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header      hdr\n\
int32[6]    del_pos\n\
geometry_msgs/Transform[2] tf_incr\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Transform\n\
# This represents the transform between two coordinate frames in free space.\n\
\n\
Vector3 translation\n\
Quaternion rotation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::raven_2::raven_automove_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::raven_2::raven_automove_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.hdr);
    stream.next(m.del_pos);
    stream.next(m.tf_incr);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct raven_automove_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::raven_2::raven_automove_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::raven_2::raven_automove_<ContainerAllocator> & v) 
  {
    s << indent << "hdr: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.hdr);
    s << indent << "del_pos[]" << std::endl;
    for (size_t i = 0; i < v.del_pos.size(); ++i)
    {
      s << indent << "  del_pos[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.del_pos[i]);
    }
    s << indent << "tf_incr[]" << std::endl;
    for (size_t i = 0; i < v.tf_incr.size(); ++i)
    {
      s << indent << "  tf_incr[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "    ", v.tf_incr[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // RAVEN_2_MESSAGE_RAVEN_AUTOMOVE_H

